
var fs = require('fs');
var config = require('../config/config.json');

async function vulnerabilitycheck(scantype, msresult, bitnamiresult): Promise<string> {
    try {    
        var bitnamicriticalcount = 0;
        var bitnamihighcount = 0;
        var bitnamimedcount = 0;
        var bitnamilowcount = 0;
        var bitnamitotal = 0;

        var mscriticalacount = 0;
        var mshighcount = 0;
        var msmedcount = 0;
        var mslowcount = 0;
        var mstotal = 0;

            // Use fs.readFileSync() method to read the file
            const msscanresult = fs.readFileSync(config[msresult],{encoding:'utf8', flag:'r'});
            const bitnamiscanresult = fs.readFileSync(config[bitnamiresult],{encoding:'utf8', flag:'r'});

            var recommendedImage = ''; 
   
            if(scantype == "Twistlock"){

                // Twistlock Scan Reult checks
                console.log("Twistlock checks..."); 

                var msVulnerabilites = JSON.parse(msscanresult)["results"][0].vulnerabilityDistribution;
                var bitnamiVulnerabilites = JSON.parse(bitnamiscanresult)["results"][0].vulnerabilityDistribution;    

                bitnamicriticalcount = bitnamiVulnerabilites.critical;
                bitnamihighcount = bitnamiVulnerabilites.high;
                bitnamimedcount = bitnamiVulnerabilites.medium;
                bitnamilowcount = bitnamiVulnerabilites.low;
                bitnamitotal = bitnamiVulnerabilites.total;

                mscriticalacount = msVulnerabilites.critical;
                mshighcount = msVulnerabilites.high;
                msmedcount = msVulnerabilites.medium;
                mslowcount = msVulnerabilites.low;
                mstotal = msVulnerabilites.total;
                
            }            
            else{

                // Snyk Scan Reult checks           
                console.log("Snyk checks..."); 

                mslowcount = (msscanresult.match(/Low severity/g) || []).length;
                msmedcount = (msscanresult.match(/Medium severity/g) || []).length;
                mshighcount = (msscanresult.match(/High severity/g) || []).length;
                mstotal = mslowcount + msmedcount + mshighcount;

                bitnamilowcount = (bitnamiscanresult.match(/Low severity/g) || []).length;
                bitnamimedcount = (bitnamiscanresult.match(/Medium severity/g) || []).length;
                bitnamihighcount = (bitnamiscanresult.match(/High severity/g) || []).length;
                bitnamitotal = bitnamilowcount + bitnamimedcount + bitnamihighcount;
            }       

            if (bitnamitotal == 0) {
                recommendedImage = "bitnami";
            }
            else if (mstotal == 0) { 
                recommendedImage = "microsoft";
            }
            else if ((bitnamicriticalcount + bitnamihighcount) < (mscriticalacount + mshighcount)){
                recommendedImage = "bitnami";
            }
            else if ((bitnamicriticalcount + bitnamihighcount) > (mscriticalacount + mshighcount)){
                recommendedImage = "microsoft";
            }
            else if (bitnamihighcount < mstotal ) {
                recommendedImage = "bitnami";
            }
            else if (bitnamihighcount > mstotal ) {
                recommendedImage = "microsoft";
            }
            else {
                recommendedImage = "bitnami";
            }    

            console.log(scantype," Scan Statistics report");
            console.log(" Bitnami Total Vulnerability Count  : ", bitnamitotal);
            console.log(" Bitnami Critial Vulnerability Count  : ", bitnamicriticalcount);
            console.log(" Bitnami High Vulnerability Count  : ", bitnamihighcount);
            console.log(" Bitnami Medium Vulnerability Count  : ", bitnamimedcount);
            console.log(" Bitnami Low Vulnerability Count  : ", bitnamilowcount);
            console.log(" ------------------------------------- ");
            console.log(" MS Total Vulnerability Count  : ", mstotal);
            console.log(" MS Critial Vulnerability Count  : ", mscriticalacount);
            console.log(" MS High Vulnerability Count  : ", mshighcount);
            console.log(" MS Medium Vulnerability Count  : ", msmedcount);
            console.log(" MS Low Vulnerability Count  : ", mslowcount);
            console.log(" ------------------------------------- ");         
            console.log(scantype," Scan Recommended Image : ", recommendedImage);
            console.log(" ------------------------------------- ");         

            return Promise.resolve(recommendedImage); 
        }         
      catch(err) {
        console.error(err);
        return Promise.resolve("notok");
      }
  }


export async function vulnerabilitychecker(): Promise<string> {   
        await vulnerabilitycheck("Twistlock" , "twistlock-ms-scan-result",  "twistlock-bitnami-scan-result");
        await vulnerabilitycheck("snyk" , "snyk-ms-scan-result",  "snyk-bitnami-scan-result");
        return Promise.resolve("ok");
  }    

